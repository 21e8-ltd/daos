# Copyright (c) 2017-2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""SConstruct to get components information

Usage:
   pushd daos
   scons -f scons_local/utils/SConstruct_info \
       --output-script=info.sh \
       --build-config=utils/build.config
   popd

The --build-config defaults to ../utils/build.config if not specified.

The --output-script is sourced or read by another script for processing.

The environment variables are prefixed with "sl_" then hae the component
name and then suffixes of "_requires", "_requires_full", and "_commit".

Note that this query is only done for the architecture that the script
is run on, so when run on x86_64 will not show the ARM components.
"""

# pylint: disable=invalid-name
# pylint: disable=import-error
# pylint: disable=wrong-import-position
# pylint: disable=too-many-locals
# pylint: disable=too-many-branches
from __future__ import print_function

import sys
import os
import os.path
sys.path.insert(0, os.path.realpath("."))
from SCons.Script import AddOption, GetOption
slocal_dir = '.'
for param in sys.argv:
    if 'SConstruct_info' in param:
        sconstruct_dir = os.path.dirname(param)
        slocal_dir = os.path.dirname(sconstruct_dir)
        if slocal_dir != '.':
            sys.path.insert(0, slocal_dir)
from prereq_tools import PreReqComponent

def get_req_comps(components, key):
    """Get all required components recursively"""

    req_comps = set(components[key].requires)
    for name in components[key].requires:
        if name in components and components[name].requires:
            req_comps |= get_req_comps(components, name)
    return req_comps


def scons():
    """Get requested prerequisite component info"""

    # pylint: disable=undefined-variable
    env = DefaultEnvironment()

    AddOption('--output-script',
              dest='output_script',
              default=os.path.join(Dir('#').abspath, 'component_info.sh'),
              help='Script file to contain build info. default: %default]')
    output_script = GetOption('output_script')

    opts = Variables()
    # pylint: enable=undefined-variable
    reqs = PreReqComponent(env, opts)
    comp_file = os.path.join(slocal_dir, "components.py")
    reqs.preload(comp_file)

    components = reqs.get_defined()

    target_name = None
    target_comps = {}
    prefix = "sl"
    commits = {}
    requires = {}
    reqs_full = {}
    with open(output_script, 'w') as f:

        f.write("# Components Dependencies generated by SConstruct_info\n\n")

        for name, component in components.items():
            if component.prereqs:
                if not target_name:
                    target_name = component.prereqs.get_config(
                        "component", "component")
                commit = component.prereqs.get_config(
                    "commit_versions", name)
                if commit:
                    commits[name] = commit
            if component.requires:
                requires[name] = list(component.requires)
                req_comps = get_req_comps(components, name)
                if req_comps:
                    if name == target_name:
                        for req_comp in req_comps:
                            target_comps[req_comp] = True
                    reqs_full[name] = list(req_comps)
        if target_name:
            f.write('%s_component="%s"\n' % (prefix, target_name))
            f.write("#\n")
        for comp in commits:
            f.write('%s_%s_commit="%s"\n' % (prefix, comp, commits[comp]))
            if target_name:
                if not comp in target_comps:
                    msg = "Warning: %s in build.config not a dependency in" \
                        " components.py for %s" % (comp, target_name)
                    print(msg, file=sys.stderr)
                    reqs_full[target_name].append(comp)
        f.write("#\n")
        for comp in requires:
            rq_list = ' '.join(requires[comp])
            f.write('%s_%s_requires="%s"\n' % (prefix, comp, rq_list))
            if comp in reqs_full:
                rq_full = ' '.join(reqs_full[comp])
                f.write('%s_%s_requires_full="%s"\n' % (prefix, comp, rq_full))
            f.write("#\n")

    # pylint: disable=undefined-variable
    try:
        Help(opts.GenerateHelpText(env), append=True)
    except TypeError:
        Help(opts.GenerateHelpText(env))
    # pylint: enable=undefined-variable

if __name__ == 'SCons.Script':
    scons()
