From 1969f09d61967467a8797c21bee1c3fa5bdfa865 Mon Sep 17 00:00:00 2001
From: Liu Xuezhao <xuezhao.liu@intel.com>
Date: Wed, 29 Jun 2016 15:08:19 +0000
Subject: [PATCH] change port number for tcp and verbs transport

When user calls cci_create_endpoint it will increase the port number
in the CCI_CONFIG file by one, then user can get the continue listening
addresses.

This patch make the change for tcp and verbs transport.

Signed-off-by: Xuezhao Liu <xuezhao.liu@intel.com>
---
 src/plugins/ctp/tcp/ctp_tcp_api.c     |   13 ++++++++++++-
 src/plugins/ctp/verbs/ctp_verbs_api.c |   18 +++++++++++++++++-
 2 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/src/plugins/ctp/tcp/ctp_tcp_api.c b/src/plugins/ctp/tcp/ctp_tcp_api.c
index ecba822..6445cc5 100644
--- a/src/plugins/ctp/tcp/ctp_tcp_api.c
+++ b/src/plugins/ctp/tcp/ctp_tcp_api.c
@@ -623,7 +623,18 @@ static int ctp_tcp_create_endpoint_at(cci_device_t * device,
 	if (service) {
 		sin.sin_port = htons((uint16_t)strtol(service, NULL, 0));
 	} else if (tdev->port != 0) {
-		sin.sin_port = tdev->port;
+		static pthread_mutex_t tcp_port_mutex =
+			PTHREAD_MUTEX_INITIALIZER;
+		static short s_tcp_port = 0;
+
+		pthread_mutex_lock(&tcp_port_mutex);
+		if (s_tcp_port == 0) {
+			s_tcp_port = ntohs(tdev->port);
+		} else {
+			s_tcp_port++;
+		}
+		sin.sin_port = htons(s_tcp_port);
+		pthread_mutex_unlock(&tcp_port_mutex);
 	}
 
 	ret = bind(sock, (const struct sockaddr *)&sin, sizeof(sin));
diff --git a/src/plugins/ctp/verbs/ctp_verbs_api.c b/src/plugins/ctp/verbs/ctp_verbs_api.c
index 5a29ac3..b4ea3a8 100644
--- a/src/plugins/ctp/verbs/ctp_verbs_api.c
+++ b/src/plugins/ctp/verbs/ctp_verbs_api.c
@@ -1179,8 +1179,24 @@ ctp_verbs_create_endpoint_at(cci_device_t * device,
 
 	vep->sin = *((struct sockaddr_in *)vdev->ifa->ifa_addr);
 
-	if (service)
+	if (service) {
 		vep->sin.sin_port = htons((uint16_t)strtol(service, NULL, 0));
+	} else {
+		if (vep->sin.sin_port != 0) {
+			static pthread_mutex_t verb_port_mutex =
+				PTHREAD_MUTEX_INITIALIZER;
+			static short s_verb_port = 0;
+
+			pthread_mutex_lock(&verb_port_mutex);
+			if (s_verb_port == 0) {
+				s_verb_port = ntohs(vep->sin.sin_port);
+			} else {
+				s_verb_port++;
+			}
+			vep->sin.sin_port = htons(s_verb_port);
+			pthread_mutex_unlock(&verb_port_mutex);
+		}
+	}
 
 	ret = rdma_bind_addr(vep->id_rc, (struct sockaddr *)&vep->sin);
 	if (ret == -1) {
-- 
1.7.1

