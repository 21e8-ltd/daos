# Copyright (c) 2016 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Test various build combinations involving prerequisites"""

Import('PREREQS ENV')

def run_test(env, *tests):
    """Build a single test involving one or more prerequisites"""
    cloned_env = env.Clone()
    my_tests = []
    for test in tests:
        my_tests.append(test)
        cloned_env.Append(CPPDEFINES=[test.upper()])
    PREREQS.require(cloned_env, *tests)
    target_name = "_".join(my_tests)
    prog = cloned_env.Program(target=target_name,
                              source=Glob('test.c'),
                              OBJPREFIX=target_name)
    return prog

PROGS = []
PROGS += run_test(ENV, 'sl_project1')
PROGS += run_test(ENV, 'sl_project1', 'sl_project2')
PROGS += run_test(ENV, 'sl_project3')
PROGS += run_test(ENV, 'sl_project4')
PROGS += run_test(ENV, 'sl_project4', 'sl_project3')
PROGS += run_test(ENV, 'hwloc', 'sl_project3')
PROGS += run_test(ENV, 'hwloc2', 'sl_project3')
PROGS += run_test(ENV, 'openpa', 'hwloc')
PROGS += run_test(ENV, 'sl_project4', 'openpa2')

TESTS = ENV.RunTests(PROGS)
AlwaysBuild(TESTS)
