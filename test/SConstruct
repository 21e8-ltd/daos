# Copyright (c) 2016 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Tests that we can build from prebuilt components"""

import sys
import os
sys.path.insert(0, "..")
from prereq_tools import PreReqComponent
from prereq_tools import GitRepoRetriever
from prereq_tools import WebRetriever

ENV = DefaultEnvironment()

OPTS = Variables('sl.conf')
PREREQS = PreReqComponent(ENV, OPTS)
PATH = os.path.realpath(os.path.join(Dir('#').abspath, "..",
                                     "components.py"))
PREREQS.preload(PATH)

PREREQS.define("sl_project1",
               retriever="fake",
               commands=['make install PREFIX=$SL_PROJECT1_PREFIX'],
               defines=["SL_PROJECT1_REQUIRED_DEFINE"],
               headers=['sl_project1.h'])

PREREQS.define("sl_project2",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT2_PREFIX',
                         'make clean'],
               headers=['sl_project2.h'],
               libs=['sl_project2'])

PREREQS.define("sl_project3",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT3_PREFIX'
                         ' SL_PROJECT2=$SL_PROJECT2_PREFIX',
                         'make clean'],
               headers=['sl_project3.h'],
               libs=['sl_project3'],
               requires=['sl_project2'])

PREREQS.define("sl_project4",
               retriever="fake",
               commands=['make clean',
                         'make install PREFIX=$SL_PROJECT4_PREFIX'
                         ' SL_PROJECT2=$SL_PROJECT2_PREFIX'
                         ' SL_PROJECT1=$SL_PROJECT1_PREFIX',
                         'make clean'],
               headers=['sl_project4.h'],
               libs=['sl_project4'],
               requires=['sl_project2', 'sl_project1'])

# pylint: disable=line-too-long
WEB_RETRIEVER = \
    WebRetriever('https://www.open-mpi.org/software/hwloc/v1.11/downloads/hwloc-1.11.2.tar.gz')
# pylint: enable=line-too-long
PREREQS.define('hwloc2', retriever=WEB_RETRIEVER,
               commands=['./configure --prefix=$HWLOC2_PREFIX', 'make',
                         'make install'],
               headers=['hwloc.h'],
               libs=['hwloc'])

PREREQS.define('openpa2',
               retriever=GitRepoRetriever( \
               'http://git.mcs.anl.gov/radix/openpa.git'),
               commands=['$LIBTOOLIZE', './autogen.sh',
                         './configure --prefix=$OPENPA2_PREFIX', 'make',
                         'make install'], libs=['opa'])

VariantDir('build', '.', duplicate=0)
SConscript('build/sl_test/SConscript', exports=['ENV', 'PREREQS'])

Default('sl_test')

PREREQS.get_build_info().save("sl_test.info")

Help(OPTS.GenerateHelpText(ENV))
