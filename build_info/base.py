#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Classes for building external prerequisite components"""
# pylint: disable=exec-used
import os
import sys
import datetime

class BuildInfo(object):
    """A utility class to read build information"""

    def __init__(self, filename=None):
        self.info = {}
        if filename is None:
            return
        with open(filename, "r") as info_file:
            for line in info_file.readlines():
                exec(line.strip(), self.info)

    def update(self, var, value):
        """save a variable in the build info"""
        self.info[var] = value

    def get(self, var, default=None):
        """Get the value of a variable from build info script"""
        return self.info.get(var, default)

    def save(self, filename):
        """Create a file to store path information for a build"""
        with open(filename, "w") as build_info:
            for var in self.info.keys():
                build_info.write("%s = \"%s\"\n"%(var, self.info[var]))

    def gen_script(self, script_name):
        """Generate a shell script to set PATH, LD_LIBRARY_PATH,
           and PREFIX variables"""
        with open(script_name, "w") as script:
            script.write("# Automatically generated by %s at %s\n\n" % \
                         (sys.argv[0], datetime.datetime.today()))

            lib_paths = []
            paths = []
            components = []

            for var in self.info.keys():
                if not type(self.info[var]) is str:
                    continue
                if not "PREFIX" in var:
                    continue
                script.write("SL_%s=%s\n"%(var, self.info[var]))
                components.append(var)
                path = os.path.join(self.info[var], "bin")
                lib = os.path.join(self.info[var], "lib")
                lib64 = os.path.join(self.info[var], "lib64")
                if os.path.exists(path) and not path in paths:
                    paths.insert(0, path)
                if os.path.exists(lib) and not lib in lib_paths:
                    lib_paths.insert(0, lib)
                if os.path.exists(lib64) and not lib64 in lib_paths:
                    lib_paths.insert(0, lib64)
            script.write("SL_LD_LIBRARY_PATH=%s\n" % \
                     os.pathsep.join(lib_paths))
            script.write("SL_PATH=%s\n"%os.pathsep.join(paths))
            script.write('SL_COMPONENTS="%s"\n'%' '.join(components))


__all__ = ["BuildInfo"]
