#!/usr/bin/python
'''
  (C) Copyright 2018 Intel Corporation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
  The Governments rights to use, modify, reproduce, release, perform, display,
  or disclose this software are subject to the terms of the Apache License as
  provided in Contract No. B609815.
  Any reproduction of computer software, computer software documentation, or
  portions thereof marked with this legend must also reproduce the markings.
'''

import os
import time
import traceback
import sys
import json

from avocado import Test
from avocado import main
from avocado.utils import process

sys.path.append('./util')
import ServerUtils
import WriteHostFile

class RebuildTests(Test):

    """
    Test Class Description:
    This class contains tests for pool rebuild.
    """

    def setUp(self):

       # get paths from the build_vars generated by build
       with open('../../../.build_vars.json') as f:
           build_paths = json.load(f)
       basepath = os.path.normpath(build_paths['PREFIX']  + "/../")
       tmp = build_paths['PREFIX'] + '/tmp'

       hostlist = self.params.get("test_machines",'/run/hosts/')
       self.hostfile = WriteHostFile.WriteHostFile(hostlist, tmp)

       server_group = self.params.get("server_group",'/server/',
                                          'daos_server')

       self.daosctl = basepath + "/" + self.params.get("daosctl",
                                                      '/run/binaries/')

       ServerUtils.runServer(self.hostfile, server_group, basepath)


    def tearDown(self):
       ServerUtils.stopServer()
       os.remove(self.hostfile)

    def test_simple_rebuild(self):
        """
        Test ID: Rebuild-001
        Test Description: The most basic rebuild test.
        Use Cases: list of use cases that are to at least some degree covered
        by this test case
        :avocado: tags=pool,simplerebuild
        """
        # not sure I need to do this but ... give it time to start
        time.sleep(1)

        setid = self.params.get("setname", '/run/testparams/setnames/')
        try:
               # use the uid/gid of the user running the test, these should
               # be perfectly valid
               uid = os.geteuid()
               gid = os.getegid()

               create_cmd = ('{0} create-pool -m {1} -u {2} -g {3} '
                             '-s {4} -c 1'.format(
                            self.daosctl, 0731, uid, gid, setid))

               uuid_str = """{0}""".format(process.system_output(create_cmd))

               time.sleep(20);

               # show the rebuild status
               status_cmd = ('{0} query-pool-status -i {1} -s {2}'.format(
                             self.daosctl, uuid_str, setid) +
                             ' -g {0} -u {1} -l 1'.format(gid, uid))

               status_str = """{0}""".format(process.system_output(status_cmd))
               print(status_str)

               # kill a server, there are 6 so kill rank 5
               kill_cmd = ('{0} kill-server -f -l {1} -s {2}'.format(
                             self.daosctl, '5', setid))
               process.system_output(kill_cmd)

               # temporarily, the exclude of a failed target must be done
               # manually
               exclude_cmd = ('{0} exclude-target -i {1} -s {2}'.format(
                             self.daosctl, uuid_str, setid) +
                             ' -l {0} -t {1}'.format(1, 3))
               print("running: %s\n", exclude_cmd)
               exclude_str = """{0}""".format(
                      process.system_output(exclude_cmd))
               print(exclude_str)

               time.sleep(60);

               # show the rebuild status again
               status_cmd = ('{0} query-pool-status -i {1} -s {2}'.format(
                             self.daosctl, uuid_str, setid) +
                             ' -g {0} -u {1} -l 1'.format(gid, uid))
               print("running: %s\n", status_cmd)
               status_str = """{0}""".format(process.system_output(status_cmd))
               print(status_str)

        except ValueError as e:
               print(e)
               print(traceback.format_exc())
               self.fail("Expecting to pass but test has failed.\n")

        finally:
            pass

if __name__ == "__main__":
    main()
