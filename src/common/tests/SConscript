"""Build doas common tests"""
import daos_build

def scons():
    """Execute build"""
    Import('denv')

    daos_build.test(denv, 'btree', 'btree.c',
                    LIBS=['daos_common', 'gurt', 'cart', 'pmemobj'])
    daos_build.test(denv, 'btree_direct', 'btree_direct.c',
                    LIBS=['daos_common', 'gurt', 'cart', 'pmemobj'])
    daos_build.test(denv, 'other', 'other.c',
                    LIBS=['daos_common', 'gurt', 'cart'])
    daos_build.test(denv, 'checksum', 'checksum.c',
                    LIBS=['daos_common', 'gurt', 'cart'])
    daos_build.test(denv, 'lru', 'lru.c',
                    LIBS=['daos_common', 'gurt', 'cart'])
    daos_build.test(denv, 'sched', 'sched.c',
                    LIBS=['daos_common', 'gurt', 'cart', 'cmocka'])
    daos_build.test(denv, 'abt_perf', 'abt_perf.c',
                    LIBS=['daos_common', 'gurt', 'abt'])

    unitEnv = denv.Clone()
    # Some syscalls are aliased when fortification is enabled, which makes
    # mocking in unit tests into a headache.
    # The compiler decides this on its own, but let's force the issue.
    unitEnv.Append(CCFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0")

    daos_build.test(unitEnv, 'drpc_tests',
                    ['drpc_tests.c', '../drpc.c', '../drpc.pb-c.c'],
                    LIBS=['protobuf-c', 'gurt', 'cmocka'])

if __name__ == "SCons.Script":
    scons()
