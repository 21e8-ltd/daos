//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

syntax = "proto3";
package proto;

// This is the main service definition for adding services to the management server
// In order to add RPCs associated with your service add them in the ManagementService
// definition below.
service MgmtControl {
	rpc GetFeature(FeatureName) returns (Feature) {};
	rpc ListAllFeatures(EmptyParams) returns (stream Feature) {};
	rpc ListFeatures(Category) returns (stream Feature) {};
	rpc ListNVMeCtrlrs(EmptyParams) returns (stream NVMeController) {};
	rpc ListNVMeNss(NVMeController) returns (stream NVMeNamespace) {};
	rpc UpdateNVMeCtrlr(UpdateNVMeCtrlrParams) returns (NVMeController) {};
	rpc FetchFioConfigPaths(EmptyParams) returns (stream FioConfigPath) {};
	rpc BurnInNVMe(BurnInNVMeParams) returns (stream BurnInNVMeReport) {};
}

message EmptyParams {}

message FeatureName {
	string name = 1;
}

message Category {
	string category = 1;
}

message Feature {
	// The category of capabilities this feature belongs to.
	Category category = 1;
	// The name of the feature.
	FeatureName fname = 2;
	// The description of the feature.
	string description = 3;
}

// NVMeController represents a NVMe Controller.
message NVMeController {
	// The id name of the controller.
	int32 id = 1;
	// The model name of the controller.
	string model = 2;
	// The serial number of the controller.
	string serial = 3;
	// The pci address of the controller.
	string pciaddr = 4;
	// The firmware revision of the controller.
	string fwrev = 5;
}

// NVMeNamespace represent NVMe namespaces
// available on controller. Results are
// streamed rather than returned at once.
message NVMeNamespace {
	// controller
	NVMeController controller = 1;
	// namespace id
	int32 id = 2;
	// device capacity in GBytes
	int32 capacity = 3;
}

message UpdateNVMeCtrlrParams {
	NVMeController ctrlr = 1;
	// Filesystem path containing firmware image
	string path = 2;
	// Firmware slot (register) to update
	int32 slot = 3;
}

message FioConfigPath {
	// Filesystem path containing fio job configuration
	string path = 1;
}

message BurnInNVMeParams {
	int32 ctrlrid = 1;
	FioConfigPath path = 2;
}

message BurnInNVMeReport {
	// Report from running burn-in reported by fio
	string report = 1;
}
