// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acl.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AclRequestStatus int32

const (
	AclRequestStatus_SUCCESS               AclRequestStatus = 0
	AclRequestStatus_ERR_UNKNOWN           AclRequestStatus = -1
	AclRequestStatus_ERR_PERM_DENIED       AclRequestStatus = -2
	AclRequestStatus_ERR_INVALID_PERMS     AclRequestStatus = -3
	AclRequestStatus_ERR_INVALID_PRINCIPAL AclRequestStatus = -4
	AclRequestStatus_ERR_INVALID_UUID      AclRequestStatus = -5
)

var AclRequestStatus_name = map[int32]string{
	0:  "SUCCESS",
	-1: "ERR_UNKNOWN",
	-2: "ERR_PERM_DENIED",
	-3: "ERR_INVALID_PERMS",
	-4: "ERR_INVALID_PRINCIPAL",
	-5: "ERR_INVALID_UUID",
}
var AclRequestStatus_value = map[string]int32{
	"SUCCESS":               0,
	"ERR_UNKNOWN":           -1,
	"ERR_PERM_DENIED":       -2,
	"ERR_INVALID_PERMS":     -3,
	"ERR_INVALID_PRINCIPAL": -4,
	"ERR_INVALID_UUID":      -5,
}

func (x AclRequestStatus) String() string {
	return proto.EnumName(AclRequestStatus_name, int32(x))
}
func (AclRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{0}
}

// Bits representing access permissions
type AclPermissions int32

const (
	AclPermissions_NONE  AclPermissions = 0
	AclPermissions_READ  AclPermissions = 1
	AclPermissions_WRITE AclPermissions = 2
)

var AclPermissions_name = map[int32]string{
	0: "NONE",
	1: "READ",
	2: "WRITE",
}
var AclPermissions_value = map[string]int32{
	"NONE":  0,
	"READ":  1,
	"WRITE": 2,
}

func (x AclPermissions) String() string {
	return proto.EnumName(AclPermissions_name, int32(x))
}
func (AclPermissions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{1}
}

// Types of principals that can have access
type AclPrincipalType int32

const (
	AclPrincipalType_USER     AclPrincipalType = 0
	AclPrincipalType_GROUP    AclPrincipalType = 1
	AclPrincipalType_EVERYONE AclPrincipalType = 2
)

var AclPrincipalType_name = map[int32]string{
	0: "USER",
	1: "GROUP",
	2: "EVERYONE",
}
var AclPrincipalType_value = map[string]int32{
	"USER":     0,
	"GROUP":    1,
	"EVERYONE": 2,
}

func (x AclPrincipalType) String() string {
	return proto.EnumName(AclPrincipalType_name, int32(x))
}
func (AclPrincipalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{2}
}

type AclResponse struct {
	Status               AclRequestStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=proto.AclRequestStatus" json:"status,omitempty"`
	Permissions          *AclEntryPermissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AclResponse) Reset()         { *m = AclResponse{} }
func (m *AclResponse) String() string { return proto.CompactTextString(m) }
func (*AclResponse) ProtoMessage()    {}
func (*AclResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{0}
}
func (m *AclResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclResponse.Unmarshal(m, b)
}
func (m *AclResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclResponse.Marshal(b, m, deterministic)
}
func (dst *AclResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclResponse.Merge(dst, src)
}
func (m *AclResponse) XXX_Size() int {
	return xxx_messageInfo_AclResponse.Size(m)
}
func (m *AclResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AclResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AclResponse proto.InternalMessageInfo

func (m *AclResponse) GetStatus() AclRequestStatus {
	if m != nil {
		return m.Status
	}
	return AclRequestStatus_SUCCESS
}

func (m *AclResponse) GetPermissions() *AclEntryPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Represents a user or group who could access an entity.
// If it is "everyone" we can ignore the identifying information.
type AclPrincipal struct {
	Type AclPrincipalType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.AclPrincipalType" json:"type,omitempty"`
	// Types that are valid to be assigned to Identifier:
	//	*AclPrincipal_Id
	//	*AclPrincipal_Name
	Identifier           isAclPrincipal_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AclPrincipal) Reset()         { *m = AclPrincipal{} }
func (m *AclPrincipal) String() string { return proto.CompactTextString(m) }
func (*AclPrincipal) ProtoMessage()    {}
func (*AclPrincipal) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{1}
}
func (m *AclPrincipal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclPrincipal.Unmarshal(m, b)
}
func (m *AclPrincipal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclPrincipal.Marshal(b, m, deterministic)
}
func (dst *AclPrincipal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclPrincipal.Merge(dst, src)
}
func (m *AclPrincipal) XXX_Size() int {
	return xxx_messageInfo_AclPrincipal.Size(m)
}
func (m *AclPrincipal) XXX_DiscardUnknown() {
	xxx_messageInfo_AclPrincipal.DiscardUnknown(m)
}

var xxx_messageInfo_AclPrincipal proto.InternalMessageInfo

func (m *AclPrincipal) GetType() AclPrincipalType {
	if m != nil {
		return m.Type
	}
	return AclPrincipalType_USER
}

type isAclPrincipal_Identifier interface {
	isAclPrincipal_Identifier()
}

type AclPrincipal_Id struct {
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3,oneof"`
}

type AclPrincipal_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*AclPrincipal_Id) isAclPrincipal_Identifier() {}

func (*AclPrincipal_Name) isAclPrincipal_Identifier() {}

func (m *AclPrincipal) GetIdentifier() isAclPrincipal_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *AclPrincipal) GetId() uint32 {
	if x, ok := m.GetIdentifier().(*AclPrincipal_Id); ok {
		return x.Id
	}
	return 0
}

func (m *AclPrincipal) GetName() string {
	if x, ok := m.GetIdentifier().(*AclPrincipal_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AclPrincipal) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AclPrincipal_OneofMarshaler, _AclPrincipal_OneofUnmarshaler, _AclPrincipal_OneofSizer, []interface{}{
		(*AclPrincipal_Id)(nil),
		(*AclPrincipal_Name)(nil),
	}
}

func _AclPrincipal_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AclPrincipal)
	// identifier
	switch x := m.Identifier.(type) {
	case *AclPrincipal_Id:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Id))
	case *AclPrincipal_Name:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("AclPrincipal.Identifier has unexpected type %T", x)
	}
	return nil
}

func _AclPrincipal_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AclPrincipal)
	switch tag {
	case 2: // identifier.id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Identifier = &AclPrincipal_Id{uint32(x)}
		return true, err
	case 3: // identifier.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Identifier = &AclPrincipal_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _AclPrincipal_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AclPrincipal)
	// identifier
	switch x := m.Identifier.(type) {
	case *AclPrincipal_Id:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Id))
	case *AclPrincipal_Name:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Identifier for an Access Control Entry
type AclEntry struct {
	Uuid                 string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Principal            *AclPrincipal `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AclEntry) Reset()         { *m = AclEntry{} }
func (m *AclEntry) String() string { return proto.CompactTextString(m) }
func (*AclEntry) ProtoMessage()    {}
func (*AclEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{2}
}
func (m *AclEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclEntry.Unmarshal(m, b)
}
func (m *AclEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclEntry.Marshal(b, m, deterministic)
}
func (dst *AclEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclEntry.Merge(dst, src)
}
func (m *AclEntry) XXX_Size() int {
	return xxx_messageInfo_AclEntry.Size(m)
}
func (m *AclEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AclEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AclEntry proto.InternalMessageInfo

func (m *AclEntry) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *AclEntry) GetPrincipal() *AclPrincipal {
	if m != nil {
		return m.Principal
	}
	return nil
}

// Permissions for the given entry
type AclEntryPermissions struct {
	Entry                *AclEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	PermissionBits       uint32    `protobuf:"varint,2,opt,name=permission_bits,json=permissionBits,proto3" json:"permission_bits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AclEntryPermissions) Reset()         { *m = AclEntryPermissions{} }
func (m *AclEntryPermissions) String() string { return proto.CompactTextString(m) }
func (*AclEntryPermissions) ProtoMessage()    {}
func (*AclEntryPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_5afbfbf77011e98b, []int{3}
}
func (m *AclEntryPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclEntryPermissions.Unmarshal(m, b)
}
func (m *AclEntryPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclEntryPermissions.Marshal(b, m, deterministic)
}
func (dst *AclEntryPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclEntryPermissions.Merge(dst, src)
}
func (m *AclEntryPermissions) XXX_Size() int {
	return xxx_messageInfo_AclEntryPermissions.Size(m)
}
func (m *AclEntryPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_AclEntryPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_AclEntryPermissions proto.InternalMessageInfo

func (m *AclEntryPermissions) GetEntry() *AclEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *AclEntryPermissions) GetPermissionBits() uint32 {
	if m != nil {
		return m.PermissionBits
	}
	return 0
}

func init() {
	proto.RegisterType((*AclResponse)(nil), "proto.AclResponse")
	proto.RegisterType((*AclPrincipal)(nil), "proto.AclPrincipal")
	proto.RegisterType((*AclEntry)(nil), "proto.AclEntry")
	proto.RegisterType((*AclEntryPermissions)(nil), "proto.AclEntryPermissions")
	proto.RegisterEnum("proto.AclRequestStatus", AclRequestStatus_name, AclRequestStatus_value)
	proto.RegisterEnum("proto.AclPermissions", AclPermissions_name, AclPermissions_value)
	proto.RegisterEnum("proto.AclPrincipalType", AclPrincipalType_name, AclPrincipalType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessControlClient is the client API for AccessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessControlClient interface {
	// Set the permissions on a given ACE or create it if it doesn't exist
	SetPermissions(ctx context.Context, in *AclEntryPermissions, opts ...grpc.CallOption) (*AclResponse, error)
	// Fetch the permissions on a given ACE
	GetPermissions(ctx context.Context, in *AclEntry, opts ...grpc.CallOption) (*AclResponse, error)
	// Remove the given ACE completely from the ACL
	DestroyAclEntry(ctx context.Context, in *AclEntry, opts ...grpc.CallOption) (*AclResponse, error)
}

type accessControlClient struct {
	cc *grpc.ClientConn
}

func NewAccessControlClient(cc *grpc.ClientConn) AccessControlClient {
	return &accessControlClient{cc}
}

func (c *accessControlClient) SetPermissions(ctx context.Context, in *AclEntryPermissions, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, "/proto.AccessControl/SetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) GetPermissions(ctx context.Context, in *AclEntry, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, "/proto.AccessControl/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) DestroyAclEntry(ctx context.Context, in *AclEntry, opts ...grpc.CallOption) (*AclResponse, error) {
	out := new(AclResponse)
	err := c.cc.Invoke(ctx, "/proto.AccessControl/DestroyAclEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlServer is the server API for AccessControl service.
type AccessControlServer interface {
	// Set the permissions on a given ACE or create it if it doesn't exist
	SetPermissions(context.Context, *AclEntryPermissions) (*AclResponse, error)
	// Fetch the permissions on a given ACE
	GetPermissions(context.Context, *AclEntry) (*AclResponse, error)
	// Remove the given ACE completely from the ACL
	DestroyAclEntry(context.Context, *AclEntry) (*AclResponse, error)
}

func RegisterAccessControlServer(s *grpc.Server, srv AccessControlServer) {
	s.RegisterService(&_AccessControl_serviceDesc, srv)
}

func _AccessControl_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclEntryPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccessControl/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).SetPermissions(ctx, req.(*AclEntryPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccessControl/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).GetPermissions(ctx, req.(*AclEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_DestroyAclEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).DestroyAclEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccessControl/DestroyAclEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).DestroyAclEntry(ctx, req.(*AclEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccessControl",
	HandlerType: (*AccessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPermissions",
			Handler:    _AccessControl_SetPermissions_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _AccessControl_GetPermissions_Handler,
		},
		{
			MethodName: "DestroyAclEntry",
			Handler:    _AccessControl_DestroyAclEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acl.proto",
}

func init() { proto.RegisterFile("acl.proto", fileDescriptor_acl_5afbfbf77011e98b) }

var fileDescriptor_acl_5afbfbf77011e98b = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x93, 0xd2, 0x8e, 0xf6, 0xa4, 0x1f, 0xc6, 0x03, 0x51, 0x4d, 0x80, 0xaa, 0x48, 0x88,
	0xaa, 0x48, 0x9b, 0x28, 0x42, 0x70, 0xc1, 0x4d, 0xda, 0x58, 0x5b, 0xc4, 0x48, 0x83, 0xb3, 0x6c,
	0xe2, 0xaa, 0xea, 0x52, 0x23, 0x59, 0xca, 0x92, 0x2c, 0x76, 0x2f, 0x2a, 0xf1, 0x64, 0x3c, 0x00,
	0x2f, 0xc5, 0xa7, 0xe2, 0xae, 0x4d, 0x5a, 0x06, 0x22, 0x37, 0x71, 0xce, 0xff, 0x77, 0xce, 0xf1,
	0xf9, 0x08, 0x34, 0x66, 0x61, 0x74, 0x98, 0x66, 0x89, 0x4c, 0x70, 0x4d, 0xbd, 0xcc, 0xcf, 0x60,
	0x58, 0x61, 0x44, 0x99, 0x48, 0x93, 0x58, 0x30, 0x7c, 0x04, 0x7b, 0x42, 0xce, 0xe4, 0x42, 0x74,
	0xf5, 0x9e, 0xde, 0x6f, 0x0f, 0x1f, 0xae, 0xe8, 0x43, 0xc5, 0x5c, 0x2f, 0x98, 0x90, 0xbe, 0x92,
	0xe9, 0x0d, 0x86, 0xdf, 0x82, 0x91, 0xb2, 0xec, 0x8a, 0x0b, 0xc1, 0x93, 0x58, 0x74, 0x2b, 0x3d,
	0xbd, 0x6f, 0x0c, 0x0f, 0x0a, 0x2f, 0x12, 0xcb, 0x6c, 0xe9, 0x15, 0x04, 0x2d, 0xe3, 0xe6, 0x35,
	0x34, 0xad, 0x30, 0xf2, 0x32, 0x1e, 0x87, 0x3c, 0x9d, 0x45, 0xf8, 0x39, 0x54, 0xe5, 0x32, 0x65,
	0x7f, 0x26, 0xdf, 0x20, 0x67, 0xcb, 0x94, 0x51, 0x05, 0x61, 0x04, 0x15, 0x3e, 0x57, 0x19, 0x5b,
	0x27, 0x1a, 0xad, 0xf0, 0x39, 0xbe, 0x0f, 0xd5, 0x78, 0x76, 0xc5, 0xba, 0x77, 0x7a, 0x7a, 0xbf,
	0x71, 0xa2, 0x51, 0xf5, 0x35, 0x6a, 0x02, 0xf0, 0x39, 0x8b, 0x25, 0xff, 0xc4, 0x59, 0x66, 0x7e,
	0x80, 0xfa, 0xfa, 0x5a, 0x18, 0x43, 0x75, 0xb1, 0xe0, 0x73, 0x95, 0xae, 0x41, 0xd5, 0x19, 0xbf,
	0x80, 0x46, 0xba, 0x4e, 0x76, 0x53, 0xce, 0xfe, 0x2d, 0xf7, 0xa0, 0x05, 0x65, 0x32, 0xd8, 0xbf,
	0xa5, 0x52, 0xfc, 0x14, 0x6a, 0x2c, 0xb7, 0xa9, 0xf0, 0xc6, 0xb0, 0xb3, 0xd3, 0x14, 0xba, 0x52,
	0xf1, 0x33, 0xe8, 0x14, 0x2d, 0x99, 0x5e, 0x72, 0xb9, 0xea, 0x62, 0x8b, 0xb6, 0x0b, 0xf3, 0x88,
	0x4b, 0x31, 0xf8, 0xa2, 0x03, 0xda, 0x9d, 0x03, 0x36, 0xe0, 0xae, 0x1f, 0x8c, 0xc7, 0xc4, 0xf7,
	0x91, 0x86, 0xbb, 0x60, 0x10, 0x4a, 0xa7, 0x81, 0xfb, 0xce, 0x9d, 0x5c, 0xb8, 0xe8, 0xd7, 0xfa,
	0xd1, 0xf1, 0x23, 0xe8, 0xe4, 0x8a, 0x47, 0xe8, 0xfb, 0xa9, 0x4d, 0x5c, 0x87, 0xd8, 0xe8, 0x67,
	0xa1, 0x3e, 0x81, 0x7b, 0xb9, 0xea, 0xb8, 0xe7, 0xd6, 0xa9, 0x63, 0x2b, 0xca, 0x47, 0x3f, 0x0a,
	0xdd, 0x84, 0x07, 0x5b, 0x3a, 0x75, 0xdc, 0xb1, 0xe3, 0x59, 0xa7, 0xe8, 0x7b, 0xc1, 0x3c, 0x06,
	0x54, 0x66, 0x82, 0xc0, 0xb1, 0xd1, 0xb7, 0x8d, 0x3c, 0x38, 0x82, 0x76, 0xde, 0xbe, 0x52, 0x7b,
	0xea, 0x50, 0x75, 0x27, 0x2e, 0x41, 0x5a, 0x7e, 0xa2, 0xc4, 0xb2, 0x91, 0x8e, 0x1b, 0x50, 0xbb,
	0xa0, 0xce, 0x19, 0x41, 0x95, 0xc1, 0x2b, 0x55, 0xec, 0xd6, 0xdc, 0x73, 0x30, 0xf0, 0x09, 0x45,
	0x5a, 0x0e, 0x1e, 0xd3, 0x49, 0xe0, 0x21, 0x1d, 0x37, 0xa1, 0x4e, 0xce, 0x09, 0xfd, 0x98, 0xc7,
	0xaa, 0x0c, 0xbf, 0xea, 0xd0, 0xb2, 0xc2, 0x90, 0x09, 0x31, 0x4e, 0x62, 0x99, 0x25, 0x11, 0x1e,
	0x41, 0xdb, 0x67, 0xb2, 0x9c, 0xf9, 0x1f, 0xeb, 0x79, 0x80, 0xcb, 0x0b, 0xbf, 0xfa, 0x29, 0x4c,
	0x0d, 0xbf, 0x86, 0xf6, 0xf1, 0x76, 0x8c, 0xdd, 0x69, 0xfe, 0xc5, 0xf1, 0x0d, 0x74, 0x6c, 0x26,
	0x64, 0x96, 0x2c, 0x37, 0x4b, 0xf7, 0x7f, 0x9e, 0x97, 0x7b, 0xca, 0xf8, 0xf2, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x37, 0xb0, 0xbb, 0x7f, 0xb3, 0x03, 0x00, 0x00,
}
