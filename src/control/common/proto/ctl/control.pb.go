// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctl/control.proto

package ctl

import (
	common "common"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ctl/control.proto", fileDescriptor_9f00a6cd943f6446) }

var fileDescriptor_9f00a6cd943f6446 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x21, 0x24, 0x9a, 0x2c, 0x11, 0x65, 0x45, 0x34, 0x1c, 0x79, 0x80, 0x42, 0x34, 0x5e,
	0x3c, 0x8a, 0xe1, 0x60, 0xd4, 0x20, 0x7d, 0x00, 0xb3, 0xae, 0x13, 0xd2, 0x74, 0xbb, 0x5b, 0x66,
	0x07, 0x4c, 0xdf, 0xdd, 0x83, 0xd9, 0x3f, 0xc4, 0x36, 0xe5, 0xe0, 0x71, 0x7e, 0xfb, 0x7d, 0xdf,
	0x74, 0x66, 0xca, 0x86, 0x92, 0xd4, 0x4c, 0x1a, 0x4d, 0x68, 0x54, 0x52, 0xa2, 0x21, 0xc3, 0x7b,
	0x92, 0xd4, 0xc4, 0x73, 0x4b, 0x06, 0xc5, 0x06, 0x02, 0x9f, 0x8c, 0x1d, 0xd2, 0x40, 0xdf, 0x06,
	0xf3, 0x0f, 0x2b, 0x85, 0x8e, 0xfc, 0xc2, 0x4b, 0x2b, 0x4b, 0x50, 0x44, 0x32, 0x94, 0xa6, 0x28,
	0x8c, 0x9e, 0xa1, 0xd0, 0x79, 0x40, 0xb7, 0x3f, 0x3d, 0x76, 0xfa, 0xba, 0x29, 0x68, 0x41, 0x8a,
	0x2f, 0xd8, 0x20, 0x0d, 0xc9, 0x2b, 0x84, 0x52, 0x20, 0xf0, 0x71, 0x22, 0x49, 0x25, 0x4d, 0xb8,
	0x86, 0xed, 0xe4, 0xfa, 0x28, 0xb7, 0xe5, 0xb4, 0xc3, 0x1f, 0x58, 0x3f, 0xf2, 0x54, 0x0a, 0xcd,
	0x2f, 0xeb, 0x4a, 0x47, 0x9c, 0x7d, 0xd4, 0x86, 0xde, 0xfb, 0xc8, 0xce, 0x22, 0x5c, 0x1a, 0x2c,
	0x04, 0xf1, 0xab, 0xba, 0x30, 0x30, 0xe7, 0x1f, 0x1f, 0xc3, 0x2e, 0x61, 0xde, 0xe5, 0xf7, 0xac,
	0x9f, 0xfa, 0x99, 0xdf, 0x77, 0x80, 0x15, 0x1f, 0x24, 0x7e, 0xd8, 0xb5, 0xd0, 0xb9, 0xad, 0xb5,
	0xfe, 0x53, 0xc4, 0xd6, 0x33, 0xc6, 0x02, 0x4c, 0xc9, 0x94, 0x2d, 0xd7, 0x79, 0xa3, 0xf6, 0x86,
	0xf9, 0xa1, 0x4f, 0x4a, 0x02, 0xe9, 0x3f, 0x8e, 0x67, 0x36, 0x7a, 0x0b, 0x57, 0x7a, 0xc9, 0x2c,
	0xad, 0xd0, 0xec, 0xb3, 0x2f, 0x40, 0xcb, 0x6f, 0xfc, 0x27, 0x1d, 0x6a, 0xf7, 0xb6, 0x86, 0xed,
	0x0e, 0x2c, 0xc5, 0x39, 0x9b, 0x2f, 0xa5, 0xaa, 0xa6, 0x1d, 0xbe, 0x64, 0x3c, 0x66, 0xb9, 0xf5,
	0x3d, 0xc1, 0x3e, 0x93, 0x60, 0xe3, 0xb9, 0x42, 0x15, 0x77, 0xed, 0x73, 0x46, 0x2d, 0xee, 0x53,
	0xe6, 0xdd, 0xcf, 0x13, 0xff, 0x17, 0xdc, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x7c, 0x7b,
	0x8e, 0x6f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MgmtCtlClient is the client API for MgmtCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MgmtCtlClient interface {
	// Prepare nonvolatile storage devices for use with DAOS
	StoragePrepare(ctx context.Context, in *StoragePrepareReq, opts ...grpc.CallOption) (*StoragePrepareResp, error)
	// Retrieve details of nonvolatile storage on server, including health info
	StorageScan(ctx context.Context, in *StorageScanReq, opts ...grpc.CallOption) (*StorageScanResp, error)
	// Format nonvolatile storage devices for use with DAOS
	StorageFormat(ctx context.Context, in *StorageFormatReq, opts ...grpc.CallOption) (MgmtCtl_StorageFormatClient, error)
	// Query DAOS system status, returns membership details.
	SystemQuery(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*common.RanksResp, error)
	// Start DAOS system (start data-plane instances after shutdown)
	SystemStart(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*common.RanksResp, error)
	// Retrieve a list of supported fabric providers
	NetworkListProviders(ctx context.Context, in *ProviderListRequest, opts ...grpc.CallOption) (*ProviderListReply, error)
	// Perform a fabric scan to determine the available provider, device, NUMA node combinations
	NetworkScanDevices(ctx context.Context, in *DeviceScanRequest, opts ...grpc.CallOption) (MgmtCtl_NetworkScanDevicesClient, error)
}

type mgmtCtlClient struct {
	cc *grpc.ClientConn
}

func NewMgmtCtlClient(cc *grpc.ClientConn) MgmtCtlClient {
	return &mgmtCtlClient{cc}
}

func (c *mgmtCtlClient) StoragePrepare(ctx context.Context, in *StoragePrepareReq, opts ...grpc.CallOption) (*StoragePrepareResp, error) {
	out := new(StoragePrepareResp)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/StoragePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) StorageScan(ctx context.Context, in *StorageScanReq, opts ...grpc.CallOption) (*StorageScanResp, error) {
	out := new(StorageScanResp)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/StorageScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) StorageFormat(ctx context.Context, in *StorageFormatReq, opts ...grpc.CallOption) (MgmtCtl_StorageFormatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[0], "/ctl.MgmtCtl/StorageFormat", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlStorageFormatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_StorageFormatClient interface {
	Recv() (*StorageFormatResp, error)
	grpc.ClientStream
}

type mgmtCtlStorageFormatClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlStorageFormatClient) Recv() (*StorageFormatResp, error) {
	m := new(StorageFormatResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mgmtCtlClient) SystemQuery(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*SystemQueryResp, error) {
	out := new(SystemQueryResp)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/SystemQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) SystemStop(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*common.RanksResp, error) {
	out := new(common.RanksResp)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/SystemStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) SystemStart(ctx context.Context, in *common.RanksReq, opts ...grpc.CallOption) (*common.RanksResp, error) {
	out := new(common.RanksResp)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/SystemStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) NetworkListProviders(ctx context.Context, in *ProviderListRequest, opts ...grpc.CallOption) (*ProviderListReply, error) {
	out := new(ProviderListReply)
	err := c.cc.Invoke(ctx, "/ctl.MgmtCtl/NetworkListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtCtlClient) NetworkScanDevices(ctx context.Context, in *DeviceScanRequest, opts ...grpc.CallOption) (MgmtCtl_NetworkScanDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MgmtCtl_serviceDesc.Streams[1], "/ctl.MgmtCtl/NetworkScanDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &mgmtCtlNetworkScanDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MgmtCtl_NetworkScanDevicesClient interface {
	Recv() (*DeviceScanReply, error)
	grpc.ClientStream
}

type mgmtCtlNetworkScanDevicesClient struct {
	grpc.ClientStream
}

func (x *mgmtCtlNetworkScanDevicesClient) Recv() (*DeviceScanReply, error) {
	m := new(DeviceScanReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MgmtCtlServer is the server API for MgmtCtl service.
type MgmtCtlServer interface {
	// Prepare nonvolatile storage devices for use with DAOS
	StoragePrepare(context.Context, *StoragePrepareReq) (*StoragePrepareResp, error)
	// Retrieve details of nonvolatile storage on server, including health info
	StorageScan(context.Context, *StorageScanReq) (*StorageScanResp, error)
	// Format nonvolatile storage devices for use with DAOS
	StorageFormat(*StorageFormatReq, MgmtCtl_StorageFormatServer) error
	// Query DAOS system status, returns membership details.
	SystemQuery(context.Context, *common.RanksReq) (*SystemQueryResp, error)
	// Stop DAOS system (shutdown data-plane instances)
	SystemStop(context.Context, *common.RanksReq) (*common.RanksResp, error)
	// Start DAOS system (start data-plane instances after shutdown)
	SystemStart(context.Context, *common.RanksReq) (*common.RanksResp, error)
	// Retrieve a list of supported fabric providers
	NetworkListProviders(context.Context, *ProviderListRequest) (*ProviderListReply, error)
	// Perform a fabric scan to determine the available provider, device, NUMA node combinations
	NetworkScanDevices(*DeviceScanRequest, MgmtCtl_NetworkScanDevicesServer) error
}

// UnimplementedMgmtCtlServer can be embedded to have forward compatible implementations.
type UnimplementedMgmtCtlServer struct {
}

func (*UnimplementedMgmtCtlServer) StoragePrepare(ctx context.Context, req *StoragePrepareReq) (*StoragePrepareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragePrepare not implemented")
}
func (*UnimplementedMgmtCtlServer) StorageScan(ctx context.Context, req *StorageScanReq) (*StorageScanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageScan not implemented")
}
func (*UnimplementedMgmtCtlServer) StorageFormat(req *StorageFormatReq, srv MgmtCtl_StorageFormatServer) error {
	return status.Errorf(codes.Unimplemented, "method StorageFormat not implemented")
}
func (*UnimplementedMgmtCtlServer) SystemQuery(ctx context.Context, req *common.RanksReq) (*SystemQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemQuery not implemented")
}
func (*UnimplementedMgmtCtlServer) SystemStop(ctx context.Context, req *common.RanksReq) (*common.RanksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStop not implemented")
}
func (*UnimplementedMgmtCtlServer) SystemStart(ctx context.Context, req *common.RanksReq) (*common.RanksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStart not implemented")
}
func (*UnimplementedMgmtCtlServer) NetworkListProviders(ctx context.Context, req *ProviderListRequest) (*ProviderListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkListProviders not implemented")
}
func (*UnimplementedMgmtCtlServer) NetworkScanDevices(req *DeviceScanRequest, srv MgmtCtl_NetworkScanDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method NetworkScanDevices not implemented")
}

func RegisterMgmtCtlServer(s *grpc.Server, srv MgmtCtlServer) {
	s.RegisterService(&_MgmtCtl_serviceDesc, srv)
}

func _MgmtCtl_StoragePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).StoragePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/StoragePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).StoragePrepare(ctx, req.(*StoragePrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_StorageScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).StorageScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/StorageScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).StorageScan(ctx, req.(*StorageScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_StorageFormat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageFormatReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).StorageFormat(m, &mgmtCtlStorageFormatServer{stream})
}

type MgmtCtl_StorageFormatServer interface {
	Send(*StorageFormatResp) error
	grpc.ServerStream
}

type mgmtCtlStorageFormatServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlStorageFormatServer) Send(m *StorageFormatResp) error {
	return x.ServerStream.SendMsg(m)
}

func _MgmtCtl_SystemQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RanksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).SystemQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/SystemQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).SystemQuery(ctx, req.(*common.RanksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_SystemStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RanksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).SystemStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/SystemStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).SystemStop(ctx, req.(*common.RanksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_SystemStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RanksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).SystemStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/SystemStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).SystemStart(ctx, req.(*common.RanksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_NetworkListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtCtlServer).NetworkListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.MgmtCtl/NetworkListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtCtlServer).NetworkListProviders(ctx, req.(*ProviderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtCtl_NetworkScanDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MgmtCtlServer).NetworkScanDevices(m, &mgmtCtlNetworkScanDevicesServer{stream})
}

type MgmtCtl_NetworkScanDevicesServer interface {
	Send(*DeviceScanReply) error
	grpc.ServerStream
}

type mgmtCtlNetworkScanDevicesServer struct {
	grpc.ServerStream
}

func (x *mgmtCtlNetworkScanDevicesServer) Send(m *DeviceScanReply) error {
	return x.ServerStream.SendMsg(m)
}

var _MgmtCtl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctl.MgmtCtl",
	HandlerType: (*MgmtCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoragePrepare",
			Handler:    _MgmtCtl_StoragePrepare_Handler,
		},
		{
			MethodName: "StorageScan",
			Handler:    _MgmtCtl_StorageScan_Handler,
		},
		{
			MethodName: "SystemQuery",
			Handler:    _MgmtCtl_SystemQuery_Handler,
		},
		{
			MethodName: "SystemStop",
			Handler:    _MgmtCtl_SystemStop_Handler,
		},
		{
			MethodName: "SystemStart",
			Handler:    _MgmtCtl_SystemStart_Handler,
		},
		{
			MethodName: "NetworkListProviders",
			Handler:    _MgmtCtl_NetworkListProviders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorageFormat",
			Handler:       _MgmtCtl_StorageFormat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NetworkScanDevices",
			Handler:       _MgmtCtl_NetworkScanDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ctl/control.proto",
}
