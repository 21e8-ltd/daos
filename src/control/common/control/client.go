//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

package control

import (
	"fmt"
	"io"
	"time"

	"common/log"

	pb "modules/mgmt/proto"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/status"
)

var connectErr = fmt.Errorf("no client connection was found, please connect")

// DAOSMgmtClient is an abstraction around the MgmtControlClient
// generated by gRPC. It provides a simplified mechanism so users can
// minimize their use of protobuf datatypes.
type DAOSMgmtClient struct {
	logger *log.Logger
	client pb.MgmtControlClient
	gconn  *grpc.ClientConn
}

// Connect provides an easy interface to connect to Mgmt DAOS server.
// It takes address and port in a string.
//	addr: address and port number separated by a ":"
func (mc *DAOSMgmtClient) Connect(addr string) error {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithInsecure())

	conn, err := grpc.Dial(addr, opts...)
	if err != nil {
		return mc.logger.LogGrpcErr(err)
	}
	mc.client = pb.NewMgmtControlClient(conn)
	mc.gconn = conn

	return nil
}

// Close terminates the underlying channel used by the grpc client service.
func (mc *DAOSMgmtClient) Close() error {
	return mc.gconn.Close()
}

// Connected determines if the underlying socket connection is alive and well.
func (mc *DAOSMgmtClient) Connected() bool {
	if mc.gconn == nil {
		return false
	}

	if state := mc.gconn.GetState(); !(state == connectivity.Idle ||
		state == connectivity.Ready) {
		mc.logger.LogGrpcErr(
			status.Errorf(
				codes.FailedPrecondition,
				fmt.Sprintf(
					"There is a problem with the client connection (%v)",
					state)))

		return false
	}

	return true
}

// GetFeature returns a feature from a requested name.
func (mc *DAOSMgmtClient) GetFeature(name string) (*pb.Feature, error) {
	if mc.Connected() == false {
		return nil, connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	feature, err := mc.client.GetFeature(ctx, &pb.FeatureName{Name: name})
	if err != nil {
		return nil, mc.logger.LogGrpcErr(err)
	}

	return feature, nil
}

// ListAllFeatures prints all supported management features.
func (mc *DAOSMgmtClient) ListAllFeatures() error {
	if mc.Connected() == false {
		return connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListAllFeatures(ctx, &pb.ListAllFeaturesParams{})
	if err != nil {
		return mc.logger.LogGrpcErr(err)
	}
	println("Listing supported mgmt features:")
	for {
		feature, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return mc.logger.LogGrpcErr(err)
		}

		fmt.Println(feature.Fname.Name, ":", feature.Description)
	}

	return nil
}

// ListFeatures returns supported management features for a given category.
func (mc *DAOSMgmtClient) ListFeatures(category string) (map[string]string, error) {
	if mc.Connected() == false {
		return nil, connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListFeatures(ctx, &pb.Category{Category: category})
	if err != nil {
		return nil, mc.logger.LogGrpcErr(err)
	}

	fm := make(map[string]string)
	for {
		f, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return nil, mc.logger.LogGrpcErr(err)
		}
		fm[f.Fname.Name] = f.Description
	}
	return fm, nil
}

// ListNVMeCtrlrs returns NVMe controllers in protobuf format.
func (mc *DAOSMgmtClient) ListNVMeCtrlrs() ([]*pb.NVMeController, error) {
	if mc.Connected() == false {
		return nil, connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListNVMeCtrlrs(ctx, &pb.ListNVMeCtrlrsParams{})
	if err != nil {
		return nil, mc.logger.LogGrpcErr(err)
	}

	var cs []*pb.NVMeController
	for {
		c, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return nil, mc.logger.LogGrpcErr(err)
		}
		cs = append(cs, c)
	}

	return cs, nil
}

// ListNVMeNss returns NVMe namespaces in protobuf format.
func (mc *DAOSMgmtClient) ListNVMeNss(ctrlr *pb.NVMeController) ([]*pb.NVMeNamespace, error) {
	if mc.Connected() == false {
		return nil, connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListNVMeNss(ctx, ctrlr)
	if err != nil {
		return nil, mc.logger.LogGrpcErr(err)
	}
	var nss []*pb.NVMeNamespace
	for {
		ns, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return nil, mc.logger.LogGrpcErr(err)
		}
		nss = append(nss, ns)
	}

	return nss, nil
}

// UpdateNVMeCtrlr updates firmware of a given controller.
// Returns new firmware revision.
func (mc *DAOSMgmtClient) UpdateNVMeCtrlr(
	params *pb.UpdateNVMeCtrlrParams) (string, error) {

	if mc.Connected() == false {
		return "", connectErr
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	ctrlr, err := mc.client.UpdateNVMeCtrlr(ctx, params)
	if err != nil {
		return "", err
	}

	return ctrlr.Fwrev, nil
}

// NewDAOSMgmtClient returns an initialized instance of the DAOSMgmtClient
// object
func NewDAOSMgmtClient() *DAOSMgmtClient {
	return &DAOSMgmtClient{logger: log.NewLogger()}
}
