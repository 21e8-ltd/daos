//
// (C) Copyright 2018 Intel Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
// The Government's rights to use, modify, reproduce, release, perform, display,
// or disclose this software are subject to the terms of the Apache License as
// provided in Contract No. 8F-30005.
// Any reproduction of computer software, computer software documentation, or
// portions thereof marked with this legend must also reproduce the markings.
//

package control

import (
	"fmt"
	"io"
	"time"

	"common/util"

	mgmtpb "modules/mgmt/proto"

	"golang.org/x/net/context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/connectivity"
	"google.golang.org/grpc/status"
)

// DAOSMgmtClient is an abstraction around the MgmtControlClient
// generated by gRPC. It provides a simplified mechanism so users can
// minimize their use of protobuf datatypes.
type DAOSMgmtClient struct {
	client mgmtpb.MgmtControlClient
	gconn  *grpc.ClientConn
}

// Connect provides an easy interface to connect to Mgmt DAOS server.
// It takes address and port in a string.
//	addr: address and port number separated by a ":"
func (mc *DAOSMgmtClient) Connect(addr string) error {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithInsecure())

	conn, err := grpc.Dial(addr, opts...)
	if err != nil {
		return util.LogGrpcErr(err)
	}
	mc.client = mgmtpb.NewMgmtControlClient(conn)
	mc.gconn = conn

	return nil
}

// Close terminates the underlying channel used by the grpc client service.
func (mc *DAOSMgmtClient) Close() error {
	return mc.gconn.Close()
}

// Connected determines if the underlying socket connection is alive and well.
func (mc *DAOSMgmtClient) Connected() bool {
	if mc.gconn == nil {
		return false
	}

	if state := mc.gconn.GetState(); !(state == connectivity.Idle ||
		state == connectivity.Ready) {
		util.LogGrpcErr(
			status.Errorf(
				codes.FailedPrecondition,
				fmt.Sprintf(
					"There is a problem with the client connection (%v)",
					state)))

		return false
	}

	return true
}

// GetFeature returns a feature from a requested name.
func (mc *DAOSMgmtClient) GetFeature(name string) (*mgmtpb.Feature, error) {
	if mc.Connected() == false {
		println("No client connection was found. Please connect.")
		return nil, nil
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	feature, err := mc.client.GetFeature(ctx, &mgmtpb.FeatureName{Name: name})
	if err != nil {
		return nil, util.LogGrpcErr(err)
	}

	return feature, nil
}

// ListFeatures prints all supported management features.
func (mc *DAOSMgmtClient) ListFeatures() error {
	if mc.Connected() == false {
		println("No client connection was found. Please connect.")
		return nil
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListFeatures(ctx, &mgmtpb.ListFeaturesParams{})
	if err != nil {
		return util.LogGrpcErr(err)
	}
	println("Listing supported mgmt features:")
	for {
		feature, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return util.LogGrpcErr(err)
		}

		fmt.Println(feature.Fname.Name, ":", feature.Description)
	}

	return nil
}

// ListNVMe prints all attached NVMe devices.
func (mc *DAOSMgmtClient) ListNVMe() error {
	if mc.Connected() == false {
		println("No client connection was found. Please connect.")
		return nil
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	stream, err := mc.client.ListNVMe(ctx, &mgmtpb.ListNVMeParams{})
	if err != nil {
		return util.LogGrpcErr(err)
	}
	println("Listing NVMe Namespaces:")
	for {
		dev, err := stream.Recv()
		if err == io.EOF {
			break
		} else if err != nil {
			return util.LogGrpcErr(err)
		}

		fmt.Println(dev)
	}

	return nil
}

// NewDAOSMgmtClient returns an initialized instance of the DAOSMgmtClient
// object
func NewDAOSMgmtClient() *DAOSMgmtClient {
	return &DAOSMgmtClient{}
}
